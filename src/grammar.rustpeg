use super::Expr;

pub module -> Vec<Expr>
    = i:(item*) { i }

item -> Expr
    = e:expression _ "\n"* { e }

expression -> Expr
    = i:identifier _ "=" _ s:expression { Expr::Assign(i, Box::new(s)) }
    / sum
    / integer_literal

sum -> Expr
    = a:product _ "+"_ b:sum { Expr::Add(Box::new(a), Box::new(b)) }
    / a:product _ "-"_ b:sum { Expr::Sub(Box::new(a), Box::new(b)) }
    / product

product -> Expr
    = a:ref_or_literal _ "*" _ b:product { Expr::Mul(Box::new(a), Box::new(b)) }
    / a:ref_or_literal _ "/" _ b:product { Expr::Div(Box::new(a), Box::new(b)) }
    / ref_or_literal

ref_or_literal -> Expr
    = i:identifier { Expr::Ref(i) }
    / integer_literal

identifier -> String
    = n:$([a-zA-Z]+) { n.to_owned() }

integer_literal -> Expr
    = n:$("-"? [0-9]+) { Expr::IntegerLiteral(n.to_owned()) }

_ = [ \t]*


