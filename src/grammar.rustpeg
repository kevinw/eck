use super::Expr;

pub module -> Vec<Expr>
    = items

items -> Vec<Expr>
    = i:(item*) { i }

item -> Expr
    = _ e:expression _ ";" _ { e }

function -> Expr
    = "(" params:((_ i:identifier _{i}) ** ",") ")" _
    block:block
    { Expr::Func { params: params, block: Box::new(block) } }

expression -> Expr
    = if_expression
    / block
    / i:identifier _ "=" _ s:expression { Expr::Assign(i, Box::new(s)) }
    / sum
    / function
    / integer_literal

block -> Expr
    = "{"  _ body:items end_expr:expression? _ "}"
      { 
          let mut v = body.clone();
          v.push(end_expr.unwrap_or(Expr::Nil));
          Expr::Block(v)
      }

if_expression -> Expr
    = "if" _ e:expression _ then_block:block _ "else" _ else_block:block {
        Expr::If(Box::new(e), Box::new(then_block), Box::new(else_block))
    }

sum -> Expr
    = a:product _ "+"_ b:sum { Expr::Add(Box::new(a), Box::new(b)) }
    / a:product _ "-"_ b:sum { Expr::Sub(Box::new(a), Box::new(b)) }
    / product

product -> Expr
    = a:ref_or_literal _ "*" _ b:product { Expr::Mul(Box::new(a), Box::new(b)) }
    / a:ref_or_literal _ "/" _ b:product { Expr::Div(Box::new(a), Box::new(b)) }
    / ref_or_literal

ref_or_literal -> Expr
    = i:identifier { Expr::Ref(i) }
    / integer_literal

identifier -> String
    = n:$([a-zA-Z]+) { n.to_owned() }

integer_literal -> Expr
    = n:$("-"? [0-9]+) { Expr::IntegerLiteral(n.to_owned()) }

_ = [ \t\n!.]*


