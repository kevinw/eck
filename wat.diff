diff --git a/hello.eck b/hello.eck
index c23928d..15d2903 100644
--- a/hello.eck
+++ b/hello.eck
@@ -1,3 +1,3 @@
-42;
-(a) { a + 1};
-99;
+main = (argc, argv) {
+    42 + 1
+};
diff --git a/src/main.rs b/src/main.rs
index 1046d9b..e6655d6 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -44,15 +44,15 @@ mod parser {
 
 fn make_builder(name: &str) -> FaerieBuilder {
     let mut flag_builder = settings::builder();
-    flag_builder.enable("is_pic").unwrap();
-    let isa_builder = isa::lookup(triple!("x86_64-unknown-unknown-macho")).unwrap();
+    flag_builder.enable("is_pic").expect("error enabling is_pic");
+    let isa_builder = isa::lookup(triple!("x86_64-unknown-unknown-macho")).expect("error configuring platform triple");
     let isa = isa_builder.finish(settings::Flags::new(flag_builder));
     let builder = FaerieBuilder::new(
         isa,
         name.to_owned(),
         FaerieTrapCollection::Disabled,
         FaerieBuilder::default_libcall_names(),
-    ).unwrap();
+    ).expect("error creating faeriebuilder");
     builder
 }
 
@@ -67,6 +67,7 @@ impl Scope {
 }
 
 struct Translator<'a> {
+    context: codegen::Context,
     builder: FunctionBuilder<'a, Variable>,
     module: &'a mut Module<FaerieBackend>,
     scopes: Vec<Scope>,
@@ -77,7 +78,11 @@ struct Translator<'a> {
 impl<'a> Translator<'a> {
     fn new(module: &'a mut Module<FaerieBackend>, builder: FunctionBuilder<'a, Variable>) -> Translator<'a> {
         let scopes = vec![Scope::new()];
+        let context = module.make_context();
+        let mut func_builder_ctx = FunctionBuilderContext::<Variable>::new();
+        let builder = FunctionBuilder::<Variable>::new(&mut context.func, &mut func_builder_ctx);
         Translator {
+            context,
             module,
             builder,
             scopes,
@@ -147,13 +152,27 @@ impl<'a> Translator<'a> {
     fn translate_expr(&mut self, expr: Expr) -> Value {
         match expr {
             Expr::Func { params, block } => {
-                let b = *block;
-                match &b {
+                self.builder.func.clear();
+                let int = self.module.pointer_type();
+                for _ in 0..params.len() {
+                    self.builder.func.signature.params.push(AbiParam::new(int));
+                }
+                let entry_ebb = self.builder.create_ebb();
+                self.builder.append_ebb_params_for_function_params(entry_ebb);
+                self.builder.switch_to_block(entry_ebb);
+                self.builder.seal_block(entry_ebb);
+
+                let return_value = match *block {
                     Expr::Block(statements) => {
                         self.translate_block_expressions(statements.clone(), Some(params)) // TODO @Slow: .clone()
                     }
                     _ => panic!("function block expected to be an Expr::Block")
-                }
+                };
+
+                self.builder.ins().return_(&[return_value]);
+                self.builder.finalize();
+
+                return_value
             },
 
             Expr::Nil => {
@@ -187,12 +206,24 @@ impl<'a> Translator<'a> {
                 self.translate_block_expressions(expressions, None)
             }
             Expr::Assign(name, expr) => {
-                let new_value = self.translate_expr(*expr);
-                let variable = match self.lookup_variable(&name) {
-                    Some(variable) => variable,
-                    None => self.declare_variable(&name),
+                let is_function = match *expr {
+                    Expr::Func { .. } => { true },
+                    _ => { false }
                 };
-                self.builder.def_var(variable, new_value);
+                let new_value = self.translate_expr(*expr);
+                if is_function {
+                    let id = self.module.declare_function(&name, Linkage::Export, &self.builder.func.signature)
+                        .expect("error declaring function");
+                    self.module.define_function(id, &mut self.context).expect("error in module.define_function");
+                    self.module.clear_context(&mut self.context);
+                    self.module.finalize_function(id);
+                } else {
+                    let variable = match self.lookup_variable(&name) {
+                        Some(variable) => variable,
+                        None => self.declare_variable(&name),
+                    };
+                    self.builder.def_var(variable, new_value);
+                }
                 new_value
             }
             Expr::Ref(name) => {
@@ -220,7 +251,7 @@ impl<'a> Translator<'a> {
                 self.builder.ins().udiv(lhs, rhs)
             }
             Expr::IntegerLiteral(n) => {
-                let integer_value:i32 = n.parse().unwrap();
+                let integer_value:i32 = n.parse().expect("could not parse integer literal");
                 self.builder.ins().iconst(self.module.pointer_type(), i64::from(integer_value))
             }
         }
@@ -239,7 +270,7 @@ fn _define_data<T>(module: &mut Module<T>) -> Result<(), Error>
     data_context.define(contents.into_boxed_slice(), Writability::Writable);
     let data_name = "foo";
     let data_id = module.declare_data(data_name, Linkage::Export, true)?;
-    module.define_data(data_id, &data_context).unwrap();
+    module.define_data(data_id, &data_context).expect("error defining module data");
     data_context.clear();
     module.finalize_data(data_id);
     Ok(())
@@ -254,30 +285,28 @@ fn main() -> Result<(), Error> {
     });
 
     let mut module = Module::<FaerieBackend>::new(make_builder("test.o"));
-    let int = module.pointer_type();
-
-    let mut func_builder_ctx = FunctionBuilderContext::<Variable>::new();
 
-    let mut context: codegen::Context = module.make_context();
-    context.func.signature.params.push(AbiParam::new(int));
-    context.func.signature.params.push(AbiParam::new(int));
-    context.func.signature.returns.push(AbiParam::new(int));
+    //let int = module.pointer_type();
+    //let mut context: codegen::Context = module.make_context();
+    //context.func.signature.params.push(AbiParam::new(int));
+    //context.func.signature.params.push(AbiParam::new(int));
+    //context.func.signature.returns.push(AbiParam::new(int));
 
     {
-        let builder = FunctionBuilder::<Variable>::new(&mut context.func, &mut func_builder_ctx);
-        let mut trans = Translator::new(&mut module, builder);
-        let entry_ebb = trans.builder.create_ebb();
-        trans.builder.append_ebb_params_for_function_params(entry_ebb);
-        trans.builder.switch_to_block(entry_ebb);
-        trans.builder.seal_block(entry_ebb);
+        let mut trans = Translator::new(&mut module);
+        //let entry_ebb = trans.builder.create_ebb();
+        //trans.builder.append_ebb_params_for_function_params(entry_ebb);
+        //trans.builder.switch_to_block(entry_ebb);
+        //trans.builder.seal_block(entry_ebb);
 
         println!("parsed: {:?}", items);
 
         let return_value = trans.translate_block_expressions(items, None);
-        trans.builder.ins().return_(&[return_value]);
-        trans.builder.finalize();
+        //trans.builder.ins().return_(&[return_value]);
+        //trans.builder.finalize();
     }
 
+    /*
     {
         let flags = settings::Flags::new(settings::builder());
         verify_function(&context.func, &flags).unwrap_or_else(|e| {
@@ -286,12 +315,13 @@ fn main() -> Result<(), Error> {
 
         println!("{}", context.func.display(None));
     }
+    */
 
-    let id = module.declare_function("main", Linkage::Export, &context.func.signature)?;
-    module.define_function(id, &mut context).unwrap();
-    module.clear_context(&mut context);
+    //let id = module.declare_function("main", Linkage::Export, &context.func.signature)?;
+    //module.define_function(id, &mut context).expect("error in module.define_function");
+    //module.clear_context(&mut context);
     
-    module.finalize_function(id);
+    //module.finalize_function(id);
 
     let product = module.finish();
     let file = File::create(product.name()).expect("error opening file");
